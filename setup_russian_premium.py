#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É—Å—Å–∫–æ–π –ø—Ä–µ–º–∏—É–º AI —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import json
import subprocess
from pathlib import Path

def print_banner():
    print("=" * 60)
    print("üá∑üá∫ –ù–ê–°–¢–†–û–ô–ö–ê –†–£–°–°–ö–û–ô –ü–†–ï–ú–ò–£–ú AI –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    print("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Yandex GPT –≤ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É")
    print("=" * 60)

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'backend/russian_premium_ai.py',
        'subscription_manager.html',
        'app.js',
        'index.html'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
        else:
            print(f"‚úÖ {file_path}")
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")
    return True

def test_russian_premium_ai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä—É—Å—Å–∫—É—é –ø—Ä–µ–º–∏—É–º AI —Å–∏—Å—Ç–µ–º—É"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Russian Premium AI...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
        sys.path.append('backend')
        from russian_premium_ai import russian_premium_ai
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–¥–ø–∏—Å–∫–∏
        for subscription_type in ['free', 'premium', 'pro', 'enterprise']:
            features = russian_premium_ai.get_subscription_features(subscription_type)
            print(f"‚úÖ {subscription_type.upper()}: {features['daily_limit']} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π/–¥–µ–Ω—å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def create_subscription_pricing():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö"""
    pricing_data = {
        'currency': 'RUB',
        'plans': {
            'free': {
                'price': 0,
                'daily_limit': 3,
                'ai_provider': 'demo',
                'features': ['basic_templates', 'demo_generation']
            },
            'premium': {
                'price': 1500,
                'daily_limit': 50,
                'ai_provider': 'yandex',
                'features': ['premium_templates', 'yandex_gpt', 'priority_support', 'export']
            },
            'pro': {
                'price': 3000,
                'daily_limit': 200,
                'ai_provider': 'yandex',
                'features': ['all_templates', 'yandex_gpt', 'gigachat_backup', 'priority_support', 'export', 'analytics']
            },
            'enterprise': {
                'price': 9900,
                'daily_limit': -1,
                'ai_provider': 'all',
                'features': ['all_templates', 'all_ai_providers', 'dedicated_support', 'export', 'analytics', 'api_access']
            }
        }
    }
    
    with open('backend/pricing_config.json', 'w', encoding='utf-8') as f:
        json.dump(pricing_data, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª pricing_config.json")

def update_backend_config():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é backend"""
    print("\n‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ backend...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_file = 'backend/.env'
    if not os.path.exists(env_file):
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env...")
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write("""# Russian Premium AI Configuration
AI_PROVIDER=demo
YANDEX_API_KEY=your-yandex-api-key-here
GIGACHAT_API_KEY=your-gigachat-api-key-here
SECRET_KEY=your-secret-key-here
DATABASE_URL=sqlite:///./upwork_proposals.db
ENABLE_RUSSIAN_PREMIUM=true
DEFAULT_SUBSCRIPTION=free
""")
        print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
    else:
        print("‚úÖ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def create_test_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    test_script = """#!/usr/bin/env python3
import os
import sys
sys.path.append('backend')

from russian_premium_ai import russian_premium_ai

def test_subscription_system():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫...")
    
    # –¢–µ—Å—Ç –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤
    for plan in ['free', 'premium', 'pro', 'enterprise']:
        features = russian_premium_ai.get_subscription_features(plan)
        print(f"‚úÖ {plan}: {features['daily_limit']} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, AI: {features['ai_provider']}")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    test_data = {
        'title': '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
        'description': '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
        'budget': '50000 RUB',
        'specialization': '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        'tone': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π'
    }
    
    result = russian_premium_ai.generate_premium_proposal(1, 'free', test_data)
    print(f"üìù –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if result['success'] else '‚ùå –û—à–∏–±–∫–∞'}")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_subscription_system()
"""
    
    with open('test_russian_premium.py', 'w', encoding='utf-8') as f:
        f.write(test_script)
    
    # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod('test_russian_premium.py', 0o755)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç test_russian_premium.py")

def create_quick_start_guide():
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∑–∞–ø—É—Å–∫—É"""
    guide = """# üá∑üá∫ –ö–†–ê–¢–ö–û–ï –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –†–£–°–°–ö–û–ô –ü–†–ï–ú–ò–£–ú –°–ò–°–¢–ï–ú–ï

## ‚úÖ –ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:

1. **Russian Premium AI —Å–∏—Å—Ç–µ–º–∞** - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Yandex GPT –≤ –ø–æ–¥–ø–∏—Å–∫–∏
2. **–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫** - subscription_manager.html
3. **–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–∏—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
4. **–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä—É–±–ª—è—Ö** - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞

## üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫:

```bash
# 1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç
python3 quick_start.py

# 2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç
# http://localhost:3000

# 3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Yandex GPT (–¥–ª—è –ø—Ä–µ–º–∏—É–º)
# - –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ cloud.yandex.ru
# - –ù–∞–∂–º–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å API" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
# - –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á

# 4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É
python3 test_russian_premium.py
```

## üí∞ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:

- **FREE**: 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/–¥–µ–Ω—å, –¥–µ–º–æ-—Ä–µ–∂–∏–º (0 RUB)
- **PREMIUM**: 50 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π/–¥–µ–Ω—å, Yandex GPT (1500 RUB/–º–µ—Å)
- **PRO**: 200 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π/–¥–µ–Ω—å, Yandex GPT + GigaChat (3000 RUB/–º–µ—Å)
- **ENTERPRISE**: –ë–µ–∑ –ª–∏–º–∏—Ç–æ–≤, –≤—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (9900 RUB/–º–µ—Å)

## üõ† –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:

1. –ü–æ–ª—É—á–∏—Ç—å Yandex GPT API –∫–ª—é—á
2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–ª–∞—Ç–µ–∂–µ–π (Stripe/–ÆKassa)
3. –ü—Ä–æ–≤–µ—Å—Ç–∏ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:

- –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: backend/
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –ò–ù–°–¢–†–£–ö–¶–ò–Ø_–î–õ–Ø_–†–û–°–°–ò–ò.md
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: test_russian_premium.py
"""
    
    with open('–†–£–°–°–ö–ê–Ø_–ü–†–ï–ú–ò–£–ú_–°–ò–°–¢–ï–ú–ê.md', 'w', encoding='utf-8') as f:
        f.write(guide)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –†–£–°–°–ö–ê–Ø_–ü–†–ï–ú–ò–£–ú_–°–ò–°–¢–ï–ú–ê.md")

def main():
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    if not check_files():
        print("\n‚ùå –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Russian Premium AI
    if not test_russian_premium_ai():
        print("\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    create_subscription_pricing()
    update_backend_config()
    create_test_script()
    create_quick_start_guide()
    
    print("\n" + "=" * 60)
    print("üéâ –†–£–°–°–ö–ê–Ø –ü–†–ï–ú–ò–£–ú –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ù–ê!")
    print("=" * 60)
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ Yandex GPT API –∫–ª—é—á –Ω–∞ cloud.yandex.ru")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: python3 quick_start.py")
    print("3. –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫: subscription_manager.html")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python3 test_russian_premium.py")
    
    print("\nüí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
    print("‚Ä¢ FREE: 0 RUB (–¥–µ–º–æ)")
    print("‚Ä¢ PREMIUM: 1500 RUB (Yandex GPT)")  
    print("‚Ä¢ PRO: 3000 RUB (Yandex GPT + GigaChat)")
    print("‚Ä¢ ENTERPRISE: 9900 RUB (–≤—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã)")
    
    print("\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("‚Ä¢ Yandex Cloud: https://cloud.yandex.ru/")
    print("‚Ä¢ GigaChat: https://developers.sber.ru/")
    print("‚Ä¢ –°–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞: http://localhost:3000")
    
    print("\nüéØ –ì–û–¢–û–í–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    main()