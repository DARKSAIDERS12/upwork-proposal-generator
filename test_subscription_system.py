#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–û–î–ü–ò–°–û–ö
============================================================
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
"""

import sqlite3
import os
from datetime import datetime, timedelta
import json

def create_test_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    conn = sqlite3.connect('test_subscriptions.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            subscription_type TEXT DEFAULT 'free',
            daily_remaining INTEGER DEFAULT 3,
            last_reset_date DATE DEFAULT CURRENT_DATE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount REAL NOT NULL,
            currency TEXT DEFAULT 'USD',
            status TEXT DEFAULT 'pending',
            stripe_payment_id TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscriptions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            plan_type TEXT NOT NULL,
            status TEXT DEFAULT 'active',
            start_date DATE DEFAULT CURRENT_DATE,
            end_date DATE,
            stripe_subscription_id TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    conn.commit()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
    return conn

def add_test_users(conn):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    cursor = conn.cursor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    test_users = [
        ('test_free@example.com', 'password123', 'free', 3),
        ('test_premium@example.com', 'password123', 'premium', 999),
        ('test_expired@example.com', 'password123', 'free', 0),
    ]
    
    for email, password, subscription, remaining in test_users:
        try:
            cursor.execute('''
                INSERT INTO users (email, password_hash, subscription_type, daily_remaining)
                VALUES (?, ?, ?, ?)
            ''', (email, f"hash_{password}", subscription, remaining))
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email} ({subscription})")
        except sqlite3.IntegrityError:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {email}")
    
    conn.commit()

def test_subscription_limits(conn):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫...")
    
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('SELECT id, email, subscription_type, daily_remaining FROM users')
    users = cursor.fetchall()
    
    for user_id, email, subscription_type, daily_remaining in users:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email}")
        print(f"   –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_type}")
        print(f"   –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {daily_remaining}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if subscription_type == 'premium':
            can_generate = True
            reason = "Premium –ø–æ–¥–ø–∏—Å–∫–∞ - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
        elif daily_remaining > 0:
            can_generate = True
            reason = f"–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –æ—Å—Ç–∞–ª–æ—Å—å {daily_remaining}"
        else:
            can_generate = False
            reason = "–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω"
        
        print(f"   –ú–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: {'‚úÖ –î–∞' if can_generate else '‚ùå –ù–µ—Ç'}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if can_generate and subscription_type == 'free':
            new_remaining = daily_remaining - 1
            cursor.execute('''
                UPDATE users SET daily_remaining = ? WHERE id = ?
            ''', (new_remaining, user_id))
            print(f"   üîÑ –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è: {new_remaining}")
    
    conn.commit()

def test_daily_reset(conn):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞...")
    
    cursor = conn.cursor()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    cursor.execute('''
        UPDATE users 
        SET last_reset_date = ?, daily_remaining = 0 
        WHERE email = 'test_expired@example.com'
    ''', (yesterday,))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å
    cursor.execute('''
        SELECT email, daily_remaining, last_reset_date 
        FROM users 
        WHERE email = 'test_expired@example.com'
    ''')
    user = cursor.fetchone()
    
    if user:
        email, remaining, last_reset = user
        current_date = datetime.now().strftime('%Y-%m-%d')
        
        if last_reset < current_date:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç
            cursor.execute('''
                UPDATE users 
                SET daily_remaining = 3, last_reset_date = ? 
                WHERE email = ?
            ''', (current_date, email))
            print(f"‚úÖ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –¥–ª—è {email}: 0 ‚Üí 3")
        else:
            print(f"‚ö†Ô∏è –°–±—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è {email}")
    
    conn.commit()

def test_payment_simulation(conn):
    """–°–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("\nüí≥ –°–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    cursor.execute('SELECT id, email FROM users WHERE subscription_type = "free" LIMIT 1')
    user = cursor.fetchone()
    
    if user:
        user_id, email = user
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        cursor.execute('''
            INSERT INTO payments (user_id, amount, currency, status, stripe_payment_id)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, 9.99, 'USD', 'completed', 'pi_test_123'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        cursor.execute('''
            UPDATE users 
            SET subscription_type = 'premium', daily_remaining = 999 
            WHERE id = ?
        ''', (user_id,))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ
        end_date = (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')
        cursor.execute('''
            INSERT INTO subscriptions (user_id, plan_type, status, end_date, stripe_subscription_id)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, 'premium', 'active', end_date, 'sub_test_123'))
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ Premium")
    
    conn.commit()

def show_database_state(conn):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    
    cursor = conn.cursor()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    print("\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
    cursor.execute('''
        SELECT email, subscription_type, daily_remaining, last_reset_date 
        FROM users
    ''')
    users = cursor.fetchall()
    
    for email, subscription, remaining, reset_date in users:
        print(f"   {email}: {subscription} ({remaining} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Å–±—Ä–æ—Å: {reset_date})")
    
    # –ü–ª–∞—Ç–µ–∂–∏
    print("\nüí≥ –ü–ª–∞—Ç–µ–∂–∏:")
    cursor.execute('SELECT user_id, amount, status, created_at FROM payments')
    payments = cursor.fetchall()
    
    for user_id, amount, status, created_at in payments:
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: ${amount} ({status}) - {created_at}")
    
    # –ü–æ–¥–ø–∏—Å–∫–∏
    print("\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∏:")
    cursor.execute('SELECT user_id, plan_type, status, end_date FROM subscriptions')
    subscriptions = cursor.fetchall()
    
    for user_id, plan, status, end_date in subscriptions:
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {plan} ({status}) –¥–æ {end_date}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–û–î–ü–ò–°–û–ö")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = create_test_database()
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        add_test_users(conn)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        show_database_state(conn)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã
        test_subscription_limits(conn)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å
        test_daily_reset(conn)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
        test_payment_simulation(conn)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        show_database_state(conn)
        
        print("\n" + "=" * 60)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 60)
        
    finally:
        conn.close()
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists('test_subscriptions.db'):
            os.remove('test_subscriptions.db')
            print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")

if __name__ == "__main__":
    main() 