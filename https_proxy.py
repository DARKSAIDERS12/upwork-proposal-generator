#!/usr/bin/env python3
"""
HTTPS –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è Upwork Proposal Generator
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É —á–µ—Ä–µ–∑ HTTPS
"""

import ssl
import socket
import threading
import http.server
import urllib.request
import urllib.parse
import urllib.error
from http.server import HTTPServer, BaseHTTPRequestHandler
import os

class HTTPSProxyHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTPS –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
            if self.path.startswith('/api/'):
                # API –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç –Ω–∞ backend
                target_url = f"http://localhost:8000{self.path}"
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç –Ω–∞ frontend
                target_url = f"http://localhost:3000{self.path}"
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
            req = urllib.request.Request(target_url)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            for header, value in self.headers.items():
                if header.lower() not in ['host', 'connection']:
                    req.add_header(header, value)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            with urllib.request.urlopen(req) as response:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
                self.send_response(response.status)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                for header, value in response.getheaders():
                    if header.lower() not in ['transfer-encoding']:
                        self.send_header(header, value)
                
                # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
                self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
                
                self.end_headers()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                self.wfile.write(response.read())
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self.send_error(500, f"Internal Server Error: {e}")
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
            if self.path.startswith('/api/'):
                target_url = f"http://localhost:8000{self.path}"
            else:
                target_url = f"http://localhost:3000{self.path}"
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            req = urllib.request.Request(target_url, data=post_data, method='POST')
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            for header, value in self.headers.items():
                if header.lower() not in ['host', 'connection', 'content-length']:
                    req.add_header(header, value)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            with urllib.request.urlopen(req) as response:
                self.send_response(response.status)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                for header, value in response.getheaders():
                    if header.lower() not in ['transfer-encoding']:
                        self.send_header(header, value)
                
                # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
                self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
                
                self.end_headers()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                self.wfile.write(response.read())
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self.send_error(500, f"Internal Server Error: {e}")
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.end_headers()
    
    def log_message(self, format, *args):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print(f"üì° HTTPS: {format % args}")

def start_https_server():
    """–ó–∞–ø—É—Å–∫ HTTPS —Å–µ—Ä–≤–µ—Ä–∞"""
    # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    context.load_cert_chain('cert.pem', 'key.pem')
    
    # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    server = HTTPServer(('0.0.0.0', 443), HTTPSProxyHandler)
    
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ SSL
    server.socket = context.wrap_socket(server.socket, server_side=True)
    
    print("üîí HTTPS –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    print("üåê URL: https://192.168.0.124")
    print("üì± –î–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –≤ —Å–µ—Ç–∏")
    print("üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞...")
        server.shutdown()
        print("‚úÖ HTTPS —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    print("=" * 60)
    print("üîí HTTPS –ü–†–û–ö–°–ò –°–ï–†–í–ï–†")
    print("=" * 60)
    print("AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Upwork")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    if not os.path.exists('cert.pem') or not os.path.exists('key.pem'):
        print("‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print("openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes")
        exit(1)
    
    start_https_server() 