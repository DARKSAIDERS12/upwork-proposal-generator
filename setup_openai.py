#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API –∫–ª—é—á–∞ –¥–ª—è Upwork Proposal Generator
"""

import os
import secrets
import subprocess
import sys

def print_banner():
    print("=" * 60)
    print("üîë –ù–ê–°–¢–†–û–ô–ö–ê OPENAI API –ö–õ–Æ–ß–ê")
    print("=" * 60)
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Upwork Proposal Generator")
    print("=" * 60)

def generate_secret_key():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"""
    return secrets.token_urlsafe(32)

def create_env_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    secret_key = generate_secret_key()
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ .env
    env_content = f"""# OpenAI API Key (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á)
# –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-openai-api-key-here

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω)
SECRET_KEY={secret_key}

# URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL=sqlite:///./upwork_proposals.db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
DEBUG=false
APP_NAME=Upwork Proposal Generator
APP_VERSION=1.0.0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
ENABLE_RATE_LIMITING=true
MAX_REQUESTS_PER_MINUTE=60
"""
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env
    env_path = os.path.join("backend", ".env")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    with open(env_path, "w", encoding="utf-8") as f:
        f.write(env_content)
    
    print(f"‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω: {env_path}")
    return env_path

def get_openai_api_key():
    """–ü–æ–ª—É—á–∞–µ—Ç OpenAI API –∫–ª—é—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüîë –ù–ê–°–¢–†–û–ô–ö–ê OPENAI API –ö–õ–Æ–ß–ê")
    print("=" * 40)
    print("–î–ª—è —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω—É–∂–µ–Ω OpenAI API –∫–ª—é—á.")
    print("–ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ https://platform.openai.com/api-keys")
    print()
    
    while True:
        api_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        
        if not api_key:
            print("‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")
            return None
        
        if api_key.startswith("sk-") and len(api_key) > 20:
            print("‚úÖ API –∫–ª—é—á –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return api_key
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-' –∏ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
            retry = input("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? (y/n): ").strip().lower()
            if retry != 'y':
                return None

def update_env_file(env_path, api_key):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª .env —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º"""
    if not api_key:
        return
    
    print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .env —Å API –∫–ª—é—á–æ–º...")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    with open(env_path, "r", encoding="utf-8") as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º placeholder –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
    content = content.replace("sk-your-openai-api-key-here", api_key)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(env_path, "w", encoding="utf-8") as f:
        f.write(content)
    
    print("‚úÖ API –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª")

def test_openai_connection(api_key):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API"""
    if not api_key:
        print("‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç.")
        return False
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API...")
    
    try:
        import openai
        openai.api_key = api_key
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç."}],
            max_tokens=10
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –∏ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ.")
        return False

def restart_servers():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä—ã —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
    subprocess.run([sys.executable, "stop_servers.py"], check=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
    subprocess.run([sys.executable, "quick_start.py"], check=True)
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!")

def main():
    print_banner()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env
    env_path = create_env_file()
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_key = get_openai_api_key()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å API –∫–ª—é—á–æ–º
    update_env_file(env_path, api_key)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if api_key:
        test_openai_connection(api_key)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print("\n" + "=" * 60)
    print("üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    
    if api_key:
        print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é")
    else:
        print("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ")
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã: python3 stop_servers.py && python3 quick_start.py")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç: http://192.168.0.124:3000")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    restart = input("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å? (y/n): ").strip().lower()
    if restart == 'y':
        restart_servers()
    
    print("\nüéØ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    main() 