#!/usr/bin/env python3
"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ –†–æ—Å—Å–∏–∏
"""

import os
import requests
import json
from typing import Dict, Any, Optional

class AIProvider:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
    
    def generate_proposal(self, project_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞"""
        raise NotImplementedError

class YandexGPTProvider(AIProvider):
    """Yandex GPT - —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∞–Ω–∞–ª–æ–≥ OpenAI"""
    
    def __init__(self, api_key: str):
        super().__init__(api_key)
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    
    def generate_proposal(self, project_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è Yandex GPT"""
        
        prompt = self._create_prompt(project_data)
        
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "modelUri": "gpt://b1g8c7c7c7c7c7c7c7c7c/yandexgpt-lite",
            "completionOptions": {
                "temperature": 0.7,
                "maxTokens": 1000
            },
            "messages": [
                {
                    "role": "user",
                    "text": prompt
                }
            ]
        }
        
        try:
            response = requests.post(self.base_url, headers=headers, json=data)
            response.raise_for_status()
            
            result = response.json()
            return result["result"]["alternatives"][0]["message"]["text"]
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
    
    def _create_prompt(self, project_data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        
        return f"""
        –°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Upwork.
        
        –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞:
        - –ù–∞–∑–≤–∞–Ω–∏–µ: {project_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        - –û–ø–∏—Å–∞–Ω–∏–µ: {project_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        - –ë—é–¥–∂–µ—Ç: {project_data.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω')}
        - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {project_data.get('specialization', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
        - –¢–æ–Ω: {project_data.get('tone', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π')}
        
        –°–æ–∑–¥–∞–π —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
        1. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        2. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–ø—ã—Ç –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        3. –û–±—ä—è—Å–Ω—è–µ—Ç –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏
        4. –í–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç
        5. –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
        
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º.
        """

class GigaChatProvider(AIProvider):
    """GigaChat - —Ä–æ—Å—Å–∏–π—Å–∫–∏–π AI –æ—Ç –°–±–µ—Ä–∞"""
    
    def __init__(self, api_key: str):
        super().__init__(api_key)
        self.base_url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    
    def generate_proposal(self, project_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è GigaChat"""
        
        prompt = self._create_prompt(project_data)
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "GigaChat:latest",
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.7,
            "max_tokens": 1000
        }
        
        try:
            response = requests.post(self.base_url, headers=headers, json=data)
            response.raise_for_status()
            
            result = response.json()
            return result["choices"][0]["message"]["content"]
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
    
    def _create_prompt(self, project_data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        
        return f"""
        –°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Upwork.
        
        –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞:
        - –ù–∞–∑–≤–∞–Ω–∏–µ: {project_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        - –û–ø–∏—Å–∞–Ω–∏–µ: {project_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        - –ë—é–¥–∂–µ—Ç: {project_data.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω')}
        - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {project_data.get('specialization', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
        - –¢–æ–Ω: {project_data.get('tone', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π')}
        
        –°–æ–∑–¥–∞–π —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
        1. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        2. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–ø—ã—Ç –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        3. –û–±—ä—è—Å–Ω—è–µ—Ç –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏
        4. –í–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç
        5. –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
        
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º.
        """

class DemoProvider(AIProvider):
    """–î–µ–º–æ-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ API"""
    
    def generate_proposal(self, project_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        
        title = project_data.get('title', 'Web Development Project')
        budget = project_data.get('budget', '$500-1000')
        specialization = project_data.get('specialization', 'Web Development')
        
        return f"""
Dear Client,

I've reviewed your project "{title}" and I'm excited about the opportunity to work with you. With my extensive experience in {specialization}, I'm confident I can deliver exceptional results that exceed your expectations.

**Why I'm the right fit for your project:**

‚úÖ **Proven Expertise**: I have successfully completed 50+ similar projects with 5-star ratings
‚úÖ **Quality Assurance**: Every deliverable goes through rigorous testing and review
‚úÖ **Clear Communication**: Regular updates and transparent project management
‚úÖ **On-time Delivery**: 100% on-time completion rate with all my clients

**My approach to your project:**
1. Detailed analysis of requirements and objectives
2. Custom solution design tailored to your specific needs
3. Iterative development with regular feedback cycles
4. Thorough testing and quality assurance
5. Comprehensive documentation and support

**Budget**: I can work within your {budget} budget while ensuring top-quality results.

**Timeline**: I can start immediately and deliver within your required timeframe.

I'm ready to begin working on your project right away. Let's discuss the details and get started!

Best regards,
[Your Name]
Freelance {specialization} Expert

P.S. I'm available for a quick call to discuss your project in detail.
        """

def get_ai_provider(provider_name: str, api_key: str) -> AIProvider:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    
    providers = {
        "yandex": YandexGPTProvider,
        "gigachat": GigaChatProvider,
        "demo": DemoProvider
    }
    
    provider_class = providers.get(provider_name.lower())
    if not provider_class:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
    
    return provider_class(api_key)

def test_providers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "title": "Website Development",
        "description": "Need a modern responsive website",
        "budget": "$1000-2000",
        "specialization": "Web Development",
        "tone": "Professional"
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–º–æ-–ø—Ä–æ–≤–∞–π–¥–µ—Ä
    try:
        demo_provider = DemoProvider("demo")
        result = demo_provider.generate_proposal(test_data)
        print("‚úÖ –î–µ–º–æ-–ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
    except Exception as e:
        print(f"‚ùå –î–µ–º–æ-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
    
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:")
    print("1. demo - –î–µ–º–æ-—Ä–µ–∂–∏–º (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API)")
    print("2. yandex - Yandex GPT (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)")
    print("3. gigachat - GigaChat (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)")

if __name__ == "__main__":
    test_providers() 