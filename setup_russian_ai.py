#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –†–æ—Å—Å–∏–∏
"""

import os
import secrets
import subprocess
import sys

def print_banner():
    print("=" * 60)
    print("üá∑üá∫ –ù–ê–°–¢–†–û–ô–ö–ê AI –î–õ–Ø –†–û–°–°–ò–ô–°–ö–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 60)
    print("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI –∏–∑ –†–æ—Å—Å–∏–∏")
    print("=" * 60)

def create_env_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    secret_key = secrets.token_urlsafe(32)
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ .env
    env_content = f"""# AI Provider Settings (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –†–æ—Å—Å–∏–∏)
# –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: demo, yandex, gigachat
AI_PROVIDER=demo

# Yandex GPT API Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://cloud.yandex.ru/docs/foundation-models/quickstart
YANDEX_API_KEY=your-yandex-api-key-here

# GigaChat API Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://developers.sber.ru/portal/products/gigachat
GIGACHAT_API_KEY=your-gigachat-api-key-here

# OpenAI API Key (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ VPN)
# –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-openai-api-key-here

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω)
SECRET_KEY={secret_key}

# URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL=sqlite:///./upwork_proposals.db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
DEBUG=false
APP_NAME=Upwork Proposal Generator
APP_VERSION=1.0.0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
ENABLE_RATE_LIMITING=true
MAX_REQUESTS_PER_MINUTE=60
"""
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env
    env_path = os.path.join("backend", ".env")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    with open(env_path, "w", encoding="utf-8") as f:
        f.write(env_content)
    
    print(f"‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω: {env_path}")
    return env_path

def select_ai_provider():
    """–í—ã–±–æ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    print("\nü§ñ –í–´–ë–û–† AI –ü–†–û–í–ê–ô–î–ï–†–ê")
    print("=" * 40)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
    print("1. demo - –î–µ–º–æ-—Ä–µ–∂–∏–º (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API, –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
    print("2. yandex - Yandex GPT (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∞–Ω–∞–ª–æ–≥ OpenAI)")
    print("3. gigachat - GigaChat (–æ—Ç –°–±–µ—Ä–∞)")
    print("4. openai - OpenAI (—Ç—Ä–µ–±—É–µ—Ç VPN)")
    print()
    
    while True:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (1-4): ").strip()
        
        providers = {
            "1": "demo",
            "2": "yandex", 
            "3": "gigachat",
            "4": "openai"
        }
        
        if choice in providers:
            return providers[choice]
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")

def get_api_key(provider):
    """–ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    
    if provider == "demo":
        return "demo_key"
    
    print(f"\nüîë –ü–û–õ–£–ß–ï–ù–ò–ï API –ö–õ–Æ–ß–ê –î–õ–Ø {provider.upper()}")
    print("=" * 40)
    
    if provider == "yandex":
        print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Yandex GPT API –∫–ª—é—á–∞:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://cloud.yandex.ru/")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'AI Services'")
        print("4. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ Yandex GPT")
        print("5. –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á")
        print()
    
    elif provider == "gigachat":
        print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è GigaChat API –∫–ª—é—á–∞:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://developers.sber.ru/")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'GigaChat'")
        print("4. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á")
        print()
    
    elif provider == "openai":
        print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OpenAI API –∫–ª—é—á–∞:")
        print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN (–°–®–ê/–ï–≤—Ä–æ–ø–∞)")
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://platform.openai.com/")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç")
        print("4. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á")
        print()
    
    api_key = input(f"–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è {provider} (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    if not api_key:
        print(f"‚ö†Ô∏è  API –∫–ª—é—á –¥–ª—è {provider} –Ω–µ —É–∫–∞–∑–∞–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
        return "demo_key"
    
    return api_key

def update_env_file(env_path, provider, api_key):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª .env —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –∏ API –∫–ª—é—á–æ–º"""
    print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .env...")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    with open(env_path, "r", encoding="utf-8") as f:
        content = f.read()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    content = content.replace("AI_PROVIDER=demo", f"AI_PROVIDER={provider}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π API –∫–ª—é—á
    if provider == "yandex":
        content = content.replace("your-yandex-api-key-here", api_key)
    elif provider == "gigachat":
        content = content.replace("your-gigachat-api-key-here", api_key)
    elif provider == "openai":
        content = content.replace("sk-your-openai-api-key-here", api_key)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(env_path, "w", encoding="utf-8") as f:
        f.write(content)
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")

def test_ai_provider(provider, api_key):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {provider.upper()}...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å
        sys.path.append(os.path.join("backend"))
        from alternative_ai_providers import get_ai_provider
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        ai_provider = get_ai_provider(provider, api_key)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "title": "Website Development",
            "description": "Need a modern responsive website",
            "budget": "$1000-2000",
            "specialization": "Web Development",
            "tone": "Professional"
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        result = ai_provider.generate_proposal(test_data)
        
        print("‚úÖ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìù –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {result[:100]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {provider}: {e}")
        return False

def show_instructions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("\n" + "=" * 60)
    print("üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã: python3 stop_servers.py && python3 quick_start.py")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç: http://localhost:3000")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    
    print("\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("‚Ä¢ Yandex GPT: https://cloud.yandex.ru/docs/foundation-models/quickstart")
    print("‚Ä¢ GigaChat: https://developers.sber.ru/portal/products/gigachat")
    print("‚Ä¢ OpenAI (—Å VPN): https://platform.openai.com/api-keys")
    
    print("\nüí° –°–æ–≤–µ—Ç—ã:")
    print("‚Ä¢ –î–µ–º–æ-—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π")
    print("‚Ä¢ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Yandex GPT –∏–ª–∏ GigaChat")
    print("‚Ä¢ OpenAI –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ VPN")

def main():
    print_banner()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env
    env_path = create_env_file()
    
    # –í—ã–±–∏—Ä–∞–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    provider = select_ai_provider()
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = get_api_key(provider)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    update_env_file(env_path, provider, api_key)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    test_ai_provider(provider, api_key)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    show_instructions()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    restart = input("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å? (y/n): ").strip().lower()
    if restart == 'y':
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        subprocess.run([sys.executable, "stop_servers.py"], check=True)
        subprocess.run([sys.executable, "quick_start.py"], check=True)
        print("‚úÖ –°–µ—Ä–≤–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!")
    
    print("\nüéØ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ –†–æ—Å—Å–∏–∏!")

if __name__ == "__main__":
    main() 