#!/usr/bin/env python3
"""
üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï GITHUB PAGES
============================================================
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GitHub Pages
"""

import subprocess
import time
import requests
import os

def run_command(command):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_github_pages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è GitHub Pages"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub Pages...")
    
    url = "https://darksaiders12.github.io/upwork-proposal-generator/"
    
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            content = response.text
            if "subscription" in content.lower() or "premium" in content.lower():
                print("‚úÖ GitHub Pages –æ–±–Ω–æ–≤–ª–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–∞!")
                return True
            else:
                print("‚ùå GitHub Pages –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub Pages: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ GitHub Pages: {e}")
        return False

def force_update():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GitHub Pages"""
    print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GitHub Pages...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
    success, stdout, stderr = run_command("git branch --show-current")
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ç–∫–∏: {stderr}")
        return False
    
    current_branch = stdout.strip()
    print(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {current_branch}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    timestamp = int(time.time())
    update_file = f"update_{timestamp}.txt"
    
    with open(update_file, "w") as f:
        f.write(f"GitHub Pages Update: {timestamp}\n")
        f.write("This file forces GitHub Pages to rebuild\n")
    
    # –ö–æ–º–º–∏—Ç–∏–º –∏ –ø—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    commands = [
        f"git add {update_file}",
        f"git commit -m 'Force GitHub Pages update {timestamp}'",
        "git push origin main"
    ]
    
    for cmd in commands:
        success, stdout, stderr = run_command(cmd)
        if not success:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{cmd}': {stderr}")
            return False
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {cmd}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(update_file)
    run_command(f"git add {update_file}")
    run_command(f"git commit -m 'Remove temporary update file'")
    run_command("git push origin main")
    
    return True

def wait_for_update(max_wait=300):
    """–û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GitHub Pages"""
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GitHub Pages (–º–∞–∫—Å–∏–º—É–º {max_wait} —Å–µ–∫—É–Ω–¥)...")
    
    start_time = time.time()
    while time.time() - start_time < max_wait:
        if check_github_pages():
            return True
        
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... (30 —Å–µ–∫—É–Ω–¥)")
        time.sleep(30)
    
    print("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï GITHUB PAGES")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if check_github_pages():
        print("‚úÖ GitHub Pages —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º
    if force_update():
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub")
        
        # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if wait_for_update():
            print("üéâ GitHub Pages —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            print("‚ö†Ô∏è GitHub Pages –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –≤ –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å GitHub Pages")

if __name__ == "__main__":
    main() 