// –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Supabase
// –í–µ—Ä—Å–∏—è 4.1 - –û–ë–ù–û–í–õ–ï–ù–û 16.08.2025
// –°–ê–ô–¢ 1 - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

// Supabase –∫–ª–∏–µ–Ω—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ SDK
let supabase = null;
let isInitialized = false;

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase
function initSupabase() {
    if (typeof window.supabase === 'undefined') {
        console.error('‚ùå Supabase SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        return false;
    }
    
    try {
        const supabaseUrl = 'https://xykhpnksatwipwcmxwyn.supabase.co';
        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh5a2hwbmtzYXR3aXB3Y214d3luIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUyNTAyNjIsImV4cCI6MjA3MDgyNjI2Mn0.PSARsuv14dI7xq35xvgVoxwjptb4cm8Ywb3bYZhY0KM';
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è CORS
        supabase = window.supabase.createClient(supabaseUrl, supabaseKey, {
            auth: {
                autoRefreshToken: true,
                persistSession: true,
                detectSessionInUrl: true
            },
            global: {
                headers: {
                    'X-Client-Info': 'upwork-proposal-generator'
                }
            }
        });
        
        isInitialized = true;
        console.log('‚úÖ Supabase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        return false;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase...');
    if (typeof window.supabase !== 'undefined') {
        initSupabase();
    } else {
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Supabase SDK...');
        const checkInterval = setInterval(() => {
            if (typeof window.supabase !== 'undefined') {
                clearInterval(checkInterval);
                initSupabase();
            }
        }, 100);
        
        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ SDK –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
        setTimeout(() => {
            clearInterval(checkInterval);
            console.error('‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Supabase SDK');
        }, 5000);
    }
});

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–∞–π—Ç–∞
const SITE_SOURCE = "site1";

// GitHub –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Supabase
async function signInWithGitHub() {
  if (!isInitialized) {
    if (!initSupabase()) {
      throw new Error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }
  
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º GitHub –≤—Ö–æ–¥...');
    
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'github',
      options: {
        redirectTo: window.location.origin
      }
    });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ GitHub –≤—Ö–æ–¥–∞:', error);
      throw error;
    }
    
    console.log('‚úÖ GitHub OAuth –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω:', data);
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    if (data.user) {
      try {
        await saveUserProfile(data.user, "github");
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å GitHub –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      } catch (profileError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è GitHub, –Ω–æ –≤—Ö–æ–¥ –ø—Ä–æ—à–µ–ª:', profileError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—Ö–æ–¥, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
      }
    }
    
    return data.user;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ GitHub –≤—Ö–æ–¥–∞:", error);
    throw error;
  }
}

// Email/Password —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase
async function registerUser(email, password, fullName) {
  if (!isInitialized) {
    if (!initSupabase()) {
      throw new Error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }
  
  try {
    console.log('üÜï –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', email);
    
    const { data, error } = await supabase.auth.signUp({
      email: email,
      password: password,
      options: {
        data: {
          full_name: fullName || email
        }
      }
    });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CORS –æ—à–∏–±–æ–∫
      if (error.message.includes('NetworkError') || error.message.includes('fetch')) {
        console.error('üåê CORS/Network –æ—à–∏–±–∫–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase');
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS.');
      }
      
      throw error;
    }
    
    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', data.user);
    
    // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    if (data.user) {
      try {
        await saveUserProfile(data.user, "email");
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      } catch (profileError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, –Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞:', profileError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
      }
    }
    
    return data.user;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    throw error;
  }
}

// Email/Password –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Supabase
async function loginUser(email, password) {
  if (!isInitialized) {
    if (!initSupabase()) {
      throw new Error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }
  
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', email);
    
    const { data, error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password
    });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CORS –æ—à–∏–±–æ–∫
      if (error.message.includes('NetworkError') || error.message.includes('fetch')) {
        console.error('üåê CORS/Network –æ—à–∏–±–∫–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase');
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS.');
      }
      
      // –ï—Å–ª–∏ email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (error.message.includes('Email not confirmed')) {
        throw new Error('Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
      }
      
      throw error;
    }
    
    console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', data.user);
    
    // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    if (data.user) {
      try {
        await saveUserProfile(data.user, "email");
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –≤—Ö–æ–¥–µ');
      } catch (profileError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ, –Ω–æ –≤—Ö–æ–¥ –ø—Ä–æ—à–µ–ª:', profileError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—Ö–æ–¥, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è
      }
    }
    
    return data.user;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
    throw error;
  }
}

// –í—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ Supabase
async function logoutUser() {
  if (!isInitialized) {
    if (!initSupabase()) {
      throw new Error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }
  
  try {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
    throw error;
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
async function saveUserProfile(user, provider) {
  if (!isInitialized) {
    if (!initSupabase()) {
      throw new Error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }
  
  try {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.email);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
    const { data: existingProfile, error: selectError } = await supabase
      .from("user_profiles")
      .select("id")
      .eq("id", user.id)
      .single();
    
    if (selectError && selectError.code !== 'PGRST116') {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', selectError);
      throw selectError;
    }
    
    if (existingProfile) {
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...');
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
      const { error } = await supabase
        .from("user_profiles")
        .update({
          email: user.email,
          full_name: user.user_metadata?.full_name || user.email,
          avatar_url: user.user_metadata?.avatar_url || null,
          provider: provider,
          updated_at: new Date()
        })
        .eq("id", user.id);
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        throw error;
      }
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
    } else {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å...');
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      const { error } = await supabase
        .from("user_profiles")
        .insert({
          id: user.id,
          email: user.email,
          full_name: user.user_metadata?.full_name || user.email,
          avatar_url: user.user_metadata?.avatar_url || null,
          provider: provider,
          created_at: new Date(),
          updated_at: new Date()
        });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ RLS, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        if (error.code === '42501') {
          console.warn('‚ö†Ô∏è RLS –ø–æ–ª–∏—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ auth.users...');
          // –ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä—ã
          return true;
        }
        
        throw error;
      }
      console.log('‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ RLS, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    if (error.code === '42501') {
      console.warn('‚ö†Ô∏è RLS –ø–æ–ª–∏—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏—é, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ');
      return false;
    }
    
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
async function checkSupabaseConnection() {
  if (!isInitialized) {
    console.error('‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return false;
  }
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    
    // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const { data, error } = await supabase
      .from('user_profiles')
      .select('count')
      .limit(1);
    
    if (error) {
      if (error.code === '42501') {
        console.warn('‚ö†Ô∏è RLS –ø–æ–ª–∏—Ç–∏–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –∑–∞–ø—Ä–æ—Å, –Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return true;
      }
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
      return false;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    return false;
  }
}

// –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç)

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getCurrentUser() {
  if (!isInitialized) {
    if (!initSupabase()) {
      console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è getCurrentUser');
      return null;
    }
  }
  
  try {
    const { data: { user }, error } = await supabase.auth.getUser();
    if (error) throw error;
    return user;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
async function getUserProfile(userId) {
  if (!isInitialized) {
    if (!initSupabase()) {
      console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è getUserProfile');
      return null;
    }
  }
  
  try {
    const { data, error } = await supabase
      .from("user_profiles")
      .select("*")
      .eq("id", userId)
      .single();
    
    if (error) throw error;
    return data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error);
    return null;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
async function updateUserLimits(userId, newDailyRemaining) {
  console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è updateUserLimits –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∫–æ–ª–æ–Ω–∫–∞ daily_remaining –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î');
  return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async function saveProposal(userId, formData, generatedProposal) {
  if (!isInitialized) {
    if (!initSupabase()) {
      throw new Error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }
  
  try {
    const { error } = await supabase
      .from("proposals")
      .insert({
        user_id: userId,
        project_title: formData.title,
        project_description: formData.description,
        generated_proposal: generatedProposal,
        site_source: SITE_SOURCE,
        created_at: new Date()
      });
    
    if (error) throw error;
    console.log("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Supabase");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", error);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
async function getProposalsHistory(userId) {
  if (!isInitialized) {
    if (!initSupabase()) {
      console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è getProposalsHistory');
      return [];
    }
  }
  
  try {
    const { data, error } = await supabase
      .from("proposals")
      .select("*")
      .eq("user_id", userId)
      .eq("site_source", SITE_SOURCE)
      .order("created_at", { ascending: false });
    
    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:", error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function onAuthStateChange(callback) {
    if (!isInitialized) {
        if (!initSupabase()) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase –¥–ª—è onAuthStateChange');
            return;
        }
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        supabase.auth.getSession().then(({ data: { session } }) => {
            if (session) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:', session.user.email);
                callback(session.user);
            } else {
                console.log('üîì –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                callback(null);
            }
        });
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
            console.log('üîÑ –°–æ–±—ã—Ç–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', event);
            
            if (event === 'SIGNED_IN' && session) {
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É:', session.user.email);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                try {
                    const provider = session.user.app_metadata?.provider || 'email';
                    await saveUserProfile(session.user, provider);
                    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏ –≤—Ö–æ–¥–µ');
                } catch (profileError) {
                    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
                    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞
                }
                
                callback(session.user);
            } else if (event === 'SIGNED_OUT') {
                console.log('üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
                callback(null);
            } else if (event === 'TOKEN_REFRESHED' && session) {
                console.log('üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', session.user.email);
                callback(session.user);
            }
        });
        
        return subscription;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ onAuthStateChange:', error);
        callback(null);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function initAuth() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase
    if (typeof createClient !== 'undefined') {
        console.log('‚úÖ Supabase SDK –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
        initSupabase();
    } else {
        console.log('‚è≥ Supabase SDK –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º...');
        // –ï—Å–ª–∏ SDK –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º
        setTimeout(initAuth, 100);
    }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.signInWithGitHub = signInWithGitHub;
window.registerUser = registerUser;
window.loginUser = loginUser;
window.logoutUser = logoutUser;
window.onAuthStateChange = onAuthStateChange;
window.getCurrentUser = getCurrentUser;
window.getUserProfile = getUserProfile;
window.updateUserLimits = updateUserLimits;
window.saveProposal = saveProposal;
window.getProposalsHistory = getProposalsHistory;
window.checkSupabaseConnection = checkSupabaseConnection;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ auth.js
window.isAuthReady = function() {
    return typeof window.signInWithGitHub !== 'undefined' &&
           typeof window.registerUser !== 'undefined' &&
           typeof window.loginUser !== 'undefined' &&
           typeof window.logoutUser !== 'undefined' &&
           typeof window.onAuthStateChange !== 'undefined' &&
           typeof window.getCurrentUser !== 'undefined' &&
           typeof window.getUserProfile !== 'undefined' &&
           typeof window.updateUserLimits !== 'undefined' &&
           typeof window.saveProposal !== 'undefined' &&
           typeof window.getProposalsHistory !== 'undefined' &&
           typeof window.checkSupabaseConnection !== 'undefined';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ auth.js
window.waitForAuthReady = function() {
    return new Promise((resolve) => {
        if (window.isAuthReady()) {
            resolve();
            return;
        }
        
        const checkInterval = setInterval(() => {
            if (window.isAuthReady()) {
                clearInterval(checkInterval);
                resolve();
            }
        }, 100);
        
        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        setTimeout(() => {
            clearInterval(checkInterval);
            console.warn('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ auth.js');
            resolve();
        }, 30000);
    });
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
console.log('üöÄ auth.js –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase —Å—Ä–∞–∑—É
if (typeof window.supabase !== 'undefined') {
    console.log('‚úÖ Supabase SDK —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
    initSupabase();
} else {
    console.log('‚è≥ Supabase SDK –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º...');
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Supabase SDK
    const checkSupabase = setInterval(() => {
        if (typeof window.supabase !== 'undefined') {
            clearInterval(checkSupabase);
            console.log('‚úÖ Supabase SDK –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
            initSupabase();
        }
    }, 100);
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è Supabase SDK
    setTimeout(() => {
        clearInterval(checkSupabase);
        console.error('‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Supabase SDK');
    }, 10000);
}

// –£–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ auth.js –≥–æ—Ç–æ–≤
console.log('‚úÖ auth.js –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAuth);
} else {
    initAuth();
}
