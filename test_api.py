#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã Upwork Proposal Generator API
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api/v1"

def print_section(title):
    print(f"\n{'='*50}")
    print(f"  {title}")
    print(f"{'='*50}")

def test_health():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    print_section("–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ï–†–í–ï–†–ê")
    
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['service']}")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {data['status']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_registration():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print_section("–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    
    user_data = {
        "email": f"test_{int(time.time())}@example.com",
        "password": "testpass123",
        "first_name": "–¢–µ—Å—Ç–æ–≤—ã–π",
        "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "specialization": "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
        "experience_level": "3-5 –ª–µ—Ç"
    }
    
    try:
        response = requests.post(f"{API_BASE}/auth/register", json=user_data)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            print(f"üìß Email: {data['email']}")
            print(f"üë§ –ò–º—è: {data['first_name']} {data['last_name']}")
            print(f"üÜî ID: {data['id']}")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_login(email, password):
    """–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    print_section("–í–•–û–î –í –°–ò–°–¢–ï–ú–£")
    
    login_data = {
        "email": email,
        "password": password
    }
    
    try:
        response = requests.post(f"{API_BASE}/auth/login-json", json=login_data)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {data['token_type']}")
            print(f"‚è∞ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω—É—Ç")
            return data['access_token']
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_proposal_generation(token):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    print_section("–ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø")
    
    proposal_data = {
        "project_description": "–ù—É–∂–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ WordPress —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞.",
        "budget_range": "$1000-5000",
        "specialization": "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
        "experience_level": "3-5 –ª–µ—Ç",
        "key_requirements": "WordPress, WooCommerce, PHP, JavaScript",
        "tone": "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"
    }
    
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...")
        response = requests.post(f"{API_BASE}/proposals/generate", json=proposal_data, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
            print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {data['tokens_used']}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data['generation_time']} —Å–µ–∫")
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {data['model']}")
            print(f"\nüìù –°–û–î–ï–†–ñ–ê–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:")
            print(f"{'='*50}")
            print(data['content'])
            print(f"{'='*50}")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_get_proposals(token):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    print_section("–°–ü–ò–°–û–ö –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(f"{API_BASE}/proposals/", headers=headers)
        if response.status_code == 200:
            proposals = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(proposals)}")
            for i, proposal in enumerate(proposals, 1):
                print(f"\nüìÑ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{i}:")
                print(f"   üÜî ID: {proposal['id']}")
                print(f"   üí∞ –ë—é–¥–∂–µ—Ç: {proposal['budget_range']}")
                print(f"   üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {proposal['specialization']}")
                print(f"   üìÖ –°–æ–∑–¥–∞–Ω–æ: {proposal['created_at']}")
            return proposals
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï UPWORK PROPOSAL GENERATOR API")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    if not test_health():
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend!")
        return
    
    # 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = test_registration()
    if not user:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # 3. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    token = test_login(user['email'], "testpass123")
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
        return
    
    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    proposal = test_proposal_generation(token)
    if not proposal:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
        return
    
    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    proposals = test_get_proposals(token)
    
    print_section("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print("üéØ Backend –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8000/docs")
    print("üåê Swagger UI: http://localhost:8000/docs")

if __name__ == "__main__":
    main() 